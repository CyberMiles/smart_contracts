pragma lity ^1.2.4;

contract CommunityVote {

    address public owner;
    
    struct Candidate {
        safeuint vp;
        int8 choice;
        uint ts;
    }
    mapping(address => Candidate) candidates;

    int8 public status; // 0: stopped; 1: running
    string public title;
    string public choices;
    uint256 public number_of_choices;
    safeuint public number_of_candidates;
    
    mapping(uint256 => safeuint) votes;

    modifier onlyOwner() {
        assert(msg.sender == owner);
        _;
    }

    constructor (string _title, uint256 _number_of_choices, string _choices) public {
        require(_number_of_choices > 0);
        
        owner = msg.sender;
        title = _title;
        choices = _choices;
        number_of_choices = _number_of_choices;
        status = 0;
        number_of_candidates = 0;
    }
    
    function addCandidates (address[] _addrs, safeuint[] _vps) external onlyOwner {
        for (uint256 i = 0; i < _addrs.length; i++) {
            Candidate memory newCan = Candidate (_vps[i], -1, 0);
            candidates[_addrs[i]] = newCan;
        }
        number_of_candidates = number_of_candidates + _addrs.length;
    }
    
    function addCandidate (address _addr, safeuint _vp) external onlyOwner {
        Candidate memory newCan = Candidate (_vp, -1, 0);
        candidates[_addr] = newCan;
        number_of_candidates = number_of_candidates + 1;
    }
    
    function getCandidate (address _addr) public view returns (safeuint, int8, uint) {
        return (candidates[_addr].vp, candidates[_addr].choice, candidates[_addr].ts);
    }
    
    function checkStatus (address _addr) public view returns (int8, safeuint, int8, string, uint256, string, safeuint[]) {
        safeuint[] memory choice_votes = new safeuint[](number_of_choices);
        for (uint256 i = 0; i < number_of_choices; i++) {
            choice_votes[i] = votes[i];
        }
        // if vp == 0, then this address is not permitted to vote
        return (status, candidates[_addr].vp, candidates[_addr].choice, title, number_of_choices, choices, choice_votes);
    }
    
    function vote (uint256 _choice) public {
        require (status == 1); // Must be running
        require (_choice < number_of_choices); // Must be valid choice and choice start at 0
        require (candidates[msg.sender].vp > 0);  // Must be a valid candidate
        require (candidates[msg.sender].ts == 0); // Cannot bet twice

        candidates[msg.sender].choice = int8(_choice); // This will not overflow due to the require()
        candidates[msg.sender].ts = now;
        votes[_choice] = votes[_choice] + candidates[msg.sender].vp;
    }

    
    function resumeVote() external onlyOwner {
        require (status == 0);
        status = 1;
    }

    function endVote() external onlyOwner {
        status = 0;
    }

    function terminate() external onlyOwner {
        selfdestruct(owner);
    }
}

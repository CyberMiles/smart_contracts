// if you changed this file, you should also consider update
// the corresponding example in docs/rule-examples.rst


pragma lity ^1.2.3;

contract TaxCaculator {
    struct Person {
        uint salary; // annual
        uint tax;
    }

    event retValue(uint _value);

    Person person;

    function queryTax(uint256 salary) public returns (uint256) {
        person = Person(salary, 0);
        uint hd = (factInsert person);
        fireAllRules;
        factDelete hd;
        retValue(person.tax);
        return person.tax;
    }

    function getResult() public view returns (uint256) {
        return person.tax;
    }

    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    rule "first bracket" when{
        p: Person(salary > 0);
    } then {
        p.tax += min(p.salary, 540000) * 5 / 100;
    }

    rule "second bracket" when{
        p: Person(salary > 540000);
    } then {
        p.tax += (min(p.salary, 1210000) - 540000) * 12 / 100;
    }

    rule "third bracket" when{
        p: Person(salary > 1210000);
    } then {
        p.tax += (min(p.salary, 2420000) - 1210000) * 20 / 100;
    }

    rule "fourth bracket" when{
        p: Person(salary > 2420000);
    } then {
        p.tax += (min(p.salary, 4530000) - 2420000) * 30 / 100;
    }

    rule "fifth bracket" when{
        p: Person(salary > 4530000);
    } then {
        p.tax += (p.salary - 4530000) * 40 / 100;
    }
}


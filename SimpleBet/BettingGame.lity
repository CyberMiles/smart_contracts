pragma lity ^1.2.4;

contract BettingGame {

    address public owner;

    struct Bet {
        int8 choice;
        safeuint amount;
        bool paid;
        bool initialized;
    }
    mapping(address => Bet) bets;

    string public game_desc;
    int8 public number_of_choices;

    safeuint total_bet_amount;

    int8 public total_bet_count;

    mapping(int8 => safeuint) choice_bet_amounts;

    int8 public correct_choice;
    string public correct_choice_txt;

    int8 public game_status; // 0 not started; 1 running; 2 stopped; 3 ended; 4 cancelled

    modifier onlyOwner() {
        assert(msg.sender == owner);
        _;
    }

    constructor (string _game_desc, int8 _number_of_choices) public {
        require(_number_of_choices > 0);
        owner = msg.sender;
        game_status = 1;
        game_desc = _game_desc;
        number_of_choices = _number_of_choices;
        total_bet_count = 0;
        total_bet_amount = 0;
        correct_choice = -1;
        correct_choice_txt = "";
    }


    function placeBet (int8 _choice) public payable {
        require (game_status == 1); // game is running
        require (_choice <= number_of_choices); // Must be valid choice and choice start at 1
        require (msg.value > 0); // Must have bet amount
        require (bets[msg.sender].initialized == false); // Cannot bet twice

        Bet memory newBet = Bet(_choice, msg.value, false, true);
        bets[msg.sender] = newBet;

        choice_bet_amounts[_choice] = choice_bet_amounts[_choice] + msg.value;
        total_bet_amount = total_bet_amount + msg.value;
        total_bet_count +=  1;
    }

    function stopGame() external onlyOwner {
        require (game_status == 1);
        game_status = 2;
    }

    function resumeGame() external onlyOwner {
        require (game_status == 2);
        game_status = 1;
    }

    function endGame(int8 _correct_choice, string _correct_choice_txt) external onlyOwner {
        correct_choice = _correct_choice;
        correct_choice_txt = _correct_choice_txt;
        game_status = 3;
    }
    
    function cancelGame() public {
        require (msg.sender == owner || isValidator(msg.sender));
        game_status = 4;
    }

    function payMe () public {
        require (bets[msg.sender].initialized); // Must have a bet
        require (bets[msg.sender].amount > 0); // More than zero
        require (bets[msg.sender].paid == false); // chose correctly
        
        if (game_status == 3) {
            // game ended normally
            require (bets[msg.sender].choice == correct_choice); // chose correctly
            safeuint payout = bets[msg.sender].amount * total_bet_amount / choice_bet_amounts[correct_choice];
            if (payout > 0) {
                msg.sender.transfer(uint256(payout));
                bets[msg.sender].paid = true; // cannot claim twice
            }
        } else if (game_status == 4) {
            // Just refund the bet
            msg.sender.transfer(uint256(bets[msg.sender].amount));
            bets[msg.sender].paid = true; // cannot claim twice
        } else {
            require (false); // Just fail
        }
    }

    function checkStatus (address _addr) public view returns (int8, string, int8, uint256, uint256, bool, int8) {
        // require (game_status == 3); // game is done
        // require (bets[_addr].initialized); // Must have a bet

        safeuint payout = 0;
        if (game_status == 3 && bets[_addr].choice == correct_choice) {
            payout = bets[_addr].amount * total_bet_amount / choice_bet_amounts[correct_choice];
        } else if (game_status == 4) {
            payout = bets[_addr].amount;
        }

        return (game_status, game_desc, bets[_addr].choice, uint256(bets[_addr].amount), uint256(payout), bets[_addr].paid, correct_choice);
    }

    function getBetInfo()public view returns(int8,string,int8,int8,safeuint){
        return (game_status, game_desc, correct_choice, total_bet_count, total_bet_amount);
    }

    function getAnswer() public view returns (int8, string) {
        return (correct_choice, correct_choice_txt);
    }

    function terminate() external onlyOwner {
        selfdestruct(owner);
    }
}
